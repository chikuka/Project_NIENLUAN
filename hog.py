# -*- coding: utf-8 -*-
"""HOG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hJfd-u_EjEW7Yc7MjZhosAFZreIFH6_s

# Overview

HOG, hay Biểu đồ độ dốc định hướng, là một bộ mô tả tính năng thường được sử dụng để trích xuất các tính năng từ dữ liệu hình ảnh. Nó được sử dụng rộng rãi trong các nhiệm vụ thị giác máy tính để phát hiện đối tượng. Kỹ thuật này đếm số lần xuất hiện hướng gradient trong các phần cục bộ của hình ảnh.

Bộ mô tả HOG tập trung vào cấu trúc hoặc hình dạng của một đối tượng. Trong trường hợp các tính năng cạnh, chúng tôi chỉ xác định xem pixel có phải là cạnh hay không. HOG cũng có thể cung cấp hướng biên. Điều này được thực hiện bằng cách trích xuất độ dốc và hướng (hoặc bạn có thể nói độ lớn và hướng) của các cạnh.

Tôi đã sử dụng tập dữ liệu [Hình ảnh](https://www.kaggle.com/brendan45774/film-image) để nhập hình ảnh động vật nhằm tạo Biểu đồ độ dốc định hướng (tính năng HOG)

![image.png](attachment:3a13f871-f753-4749-9150-a1470831b0f1.png)

# Importing Libaries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
# %matplotlib inline

from skimage.io import imread, imshow
from skimage.transform import resize
from skimage.feature import hog
from skimage import data, exposure

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
print('Done!')

"""# Reading the Images"""

panda = imread('../input/film-image/panda.jpg')
imshow(panda)
print(panda.shape)

bunny = imread('../input/film-image/bunny.jpg')
imshow(bunny)
print(bunny.shape)

quokka = imread('../input/film-image/quokka.jpg')
imshow(quokka)
print(quokka.shape)

tiger = imread('../input/film-image/tiger.jpg')
imshow(tiger)
print(tiger.shape)

zebra = imread('../input/film-image/zebra.jpg')
imshow(zebra)
print(zebra.shape)

meerkat = imread('../input/film-image/meerkat.jpg')
imshow(meerkat)
print(meerkat.shape)

"""# Resizing Images

Thay đổi kích thước hình ảnh của bạn là rất quan trọng vì tùy thuộc vào kích thước bạn đã thay đổi kích thước hình ảnh của mình, giao diện của chúng sẽ thay đổi khi chúng được xử lý.

MẸO:
Nếu bạn muốn biểu đồ gradient định hướng hoặc HOG có các đường màu trắng lớn hơn, hãy làm cho kích thước pixel của hình ảnh của bạn nhỏ hơn. Nếu bạn muốn có nhiều đường nét mảnh hơn, hãy làm cho hình ảnh của bạn lớn hơn. Tùy thuộc vào hình ảnh của bạn, kích thước pixel của bạn có thể thay đổi dựa trên độ rõ nét.
"""

resized_panda = resize(panda, (100,150))
imshow(resized_panda)
print(resized_panda.shape)

resized_bunny = resize(bunny, (170,230))
imshow(resized_bunny)
print(resized_bunny.shape)

resized_quokka = resize(quokka, (170,120))
imshow(resized_quokka)
print(resized_quokka.shape)

resized_tiger = resize(tiger, (350,300))
imshow(resized_tiger)
print(resized_tiger.shape)

resized_zebra = resize(zebra, (270,400))
imshow(resized_zebra)
print(resized_zebra.shape)

resized_meerkat = resize(meerkat, (260,200))
imshow(resized_meerkat)
print(resized_meerkat.shape)

"""Thêm trực tiếp hàm hog từ skimage.features. Vì vậy, chúng ta không phải tính toán độ dốc, độ lớn (tổng độ dốc) và hướng riêng lẻ. Hàm hog sẽ tính toán nội bộ và trả về ma trận tính năng.

Ngoài ra, nếu bạn đặt tham số 'visualize = True', nó sẽ trả về hình ảnh của HOG.
"""

#creating hog features

fd, hog_panda = hog(resized_panda, orientations=9, pixels_per_cell=(8, 8),
                    cells_per_block=(2, 2), visualize=True, multichannel=True)

fd, hog_bunny = hog(resized_bunny, orientations=9, pixels_per_cell=(8, 8),
                    cells_per_block=(2, 2), visualize=True, multichannel=True)

fd, hog_quokka = hog(resized_quokka, orientations=9, pixels_per_cell=(8, 8),
                    cells_per_block=(2, 2), visualize=True, multichannel=True)

fd, hog_tiger = hog(resized_tiger, orientations=9, pixels_per_cell=(8, 8),
                    cells_per_block=(2, 2), visualize=True, multichannel=True)

fd, hog_zebra = hog(resized_zebra, orientations=9, pixels_per_cell=(8, 8),
                    cells_per_block=(2, 2), visualize=True, multichannel=True)

fd, hog_meerkat = hog(resized_meerkat, orientations=9, pixels_per_cell=(8, 8),
                    cells_per_block=(2, 2), visualize=True, multichannel=True)

fd.shape

"""# Hog Images"""

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True)

ax1.imshow(resized_panda, cmap=plt.cm.gray)
ax1.set_title('Input image')

# Rescale histogram for better display
hog_panda_rescaled = exposure.rescale_intensity(hog_panda, in_range=(0, 10))

ax2.imshow(hog_panda_rescaled, cmap=plt.cm.gray)
ax2.set_title('Histogram of Oriented Gradients (HOG)')

# store to file
plt.savefig("panda_hog.png", dpi=125)

plt.show()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True)

ax1.imshow(resized_bunny, cmap=plt.cm.gray)
ax1.set_title('Input image')

# Rescale histogram for better display
hog_bunny_rescaled = exposure.rescale_intensity(hog_bunny, in_range=(0, 10))

ax2.imshow(hog_bunny_rescaled, cmap=plt.cm.gray)
ax2.set_title('Histogram of Oriented Gradients (HOG)')

# store to file
plt.savefig("bunny_hog.png", dpi=125)

plt.show()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True)

ax1.imshow(resized_quokka, cmap=plt.cm.gray)
ax1.set_title('Input image')

# Rescale histogram for better display
hog_quokka_rescaled = exposure.rescale_intensity(hog_quokka, in_range=(0, 10))

ax2.imshow(hog_quokka_rescaled, cmap=plt.cm.gray)
ax2.set_title('Histogram of Oriented Gradients (HOG)')

# store to file
plt.savefig("quokka_hog.png", dpi=125)

plt.show()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True)

ax1.imshow(resized_tiger, cmap=plt.cm.gray)
ax1.set_title('Input image')

# Rescale histogram for better display
hog_tiger_rescaled = exposure.rescale_intensity(hog_tiger, in_range=(0, 10))

ax2.imshow(hog_tiger_rescaled, cmap=plt.cm.gray)
ax2.set_title('Histogram of Oriented Gradients (HOG)')

# store to file
plt.savefig("tiger_hog.png", dpi=125)

plt.show()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True)

ax1.imshow(resized_zebra, cmap=plt.cm.gray)
ax1.set_title('Input image')

# Rescale histogram for better display
hog_zebra_rescaled = exposure.rescale_intensity(hog_zebra, in_range=(0, 10))

ax2.imshow(hog_zebra_rescaled, cmap=plt.cm.gray)
ax2.set_title('Histogram of Oriented Gradients (HOG)')

# store to file
plt.savefig("zebra_hog.png", dpi=125)

plt.show()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True)

ax1.imshow(resized_meerkat, cmap=plt.cm.gray)
ax1.set_title('Input image')

# Rescale histogram for better display
hog_meerkat_rescaled = exposure.rescale_intensity(hog_meerkat, in_range=(0, 10))

ax2.imshow(hog_meerkat_rescaled, cmap=plt.cm.gray)
ax2.set_title('Histogram of Oriented Gradients (HOG)')

# store to file
plt.savefig("meerkat_hog.png", dpi=125)

plt.show()

